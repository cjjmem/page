---
layout: post
title:  "学习redis"
date:   2017-07-06 17:56:00 +0800
categories: jekyll update
---

# Redis

redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。

redis是一种高级的key:value存储系统，其中value支持五种数据类型：

 1. 字符串（Strings）
 2. 字符串列表（Lists）
 3. 字符串集合（Sets）
 4. 有序字符串集合（Sorted Sets）
 5. 哈希（Hashes）

## 命令行

windos 操作系統下使用redis-cli 工具

### 常用字符串 (Strings)

* **set** 设置指定 key 的值
    ```
    set hello hi
    ```

* **setex** 指定的 key 设置值及其过期时间

    SETEX KEY_NAME TIMEOUT VALUE
    ```
    setex hello 30 hi
    ```

* **get** 获取指定 key 的值
    ```
    get hello
    ```

* **del** 删除指定 key 的值
    ```
    del hello
    ```

* **strlen** 获取长度
    ```
    strlen hello
    ```

* **getrange** 截取字符串

    GETRANGE KEY_NAME start end
    ```
    getrange hello 1 3
    ```

* **incr** 将 key 中储存的数字值增一
    ```
    incr cost
    ```

* **decr** 将 key 中储存的数字值减一
    ```
    decr cost
    ```

### 哈希

Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象
Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。

* **hmset** 同时将多个 field-value (域-值)对设置到哈希表 key 中

    ```
    hmset 1 name "user001" password "password"

    hmset 1 name "user001"
    ```

* **hvals** 获取哈希表中所有值

    ```
    hvals 1
    ```

* **hget** 获取哈希表中某个对象值

    HGET KEY_NAME FIELD
    ```
    hget 1 name
    ```

* **hgetall** 获取哈希表中所有值

    HGETALL KEY_NAME
    ```
    hgetall 1
    ```

* **hkeys** 获取所有哈希表中的
    ```
    hkeys 1
    ```

### 列表

Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）
一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。


* **lpush** 将一个或多个值插入到列表头部
    ```
    lpush db redis
    lpsuh db mysql
    lpush db mongodb
    ```

* **lrange** 获取列表指定范围内的元素

    LRANGE key start stop
    ```
    lrange db 0 10
    ```

 * **lrange** 获取列表指定范围内的元素

    LRANGE key start stop
    ```
    lrange db 0 10
    ```

* **lpop** 移出并获取列表的第一个元素

    LPOP key
    ```
    lpop db
    ```

* **llen** 获取列表长度

    LLEN key
    ```
    llen db
    ```

* **lindex** 通过索引获取列表中的元素

    LINDEX key index
    ```
    lindex db
    ```

### Redis 集合(SET)

Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。
Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。
集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。

```
redis 127.0.0.1:6379> SADD runoobkey redis
(integer) 1
redis 127.0.0.1:6379> SADD runoobkey mongodb
(integer) 1
redis 127.0.0.1:6379> SADD runoobkey mysql
(integer) 1
redis 127.0.0.1:6379> SADD runoobkey mysql
(integer) 0
redis 127.0.0.1:6379> SMEMBERS runoobkey

1) "mysql"
2) "mongodb"
3) "redis"

```

* **sadd** 通过索引获取列表中的元素

    SADD key member1 [member2]
    ```
    sadd lang php c# java nodejs
    ```
* **scard** 获取集合的成员数

    SCARD key
    ```
    scard lang
    ```
* **sdiff** 返回给定所有集合的差集

    SDIFF key1 [key2]
    ```
    sadd lang1 php
    sdiff lang lang1
    ```
* **sdiffstore** 返回给定所有集合的差集并存储在 destination 中

    SDIFFSTORE destination key1 [key2]
    ```
    sdiffstore destination lang lang1
    ```
* **sinter** 返回给定所有集合的交集

    SINTER key1 [key2]
    ```
    sinter lang lang1
    ```
* **sinterstore** 返回给定所有集合的交集并存储在 destination 中

    SINTERSTORE destination key1 [key2]
    ```
    sinterstore destination lang lang1
    ```
* **sismember** 判断 member 元素是否是集合 key 的成员

    SISMEMBER key member
    ```
    sismember lang php
    ```
* **smembers** 返回集合中的所有成员

    SMEMBERS key
    ```
    smembers lang
    ```
* **smove** 将 member 元素从 source 集合移动到 destination 集合

    SMOVE source destination member
    ```
    smove lang destination php
    ```
* **spop** 移除并返回集合中的一个随机元素

    SPOP key
    ```
    spop lang
    ```
* **srandmember** 返回集合中一个或多个随机数

    SRANDMEMBER key [count]
    ```
    srandmember lang 2
    ```
* **srem** 移除集合中一个或多个成员

    SREM key member1 [member2]
    ```
    srem lang php
    ```
* **sunion** 返回所有给定集合的并集

    SUNION key1 [key2]
    ```
    sunion lang lang1
    ```

* **sunionstore** 所有给定集合的并集存储在 destination 集合中

    SUNIONSTORE destination key1 [key2]
    ```
    sunionstore destination lang lang1
    ```
* **sscan** 迭代集合中的元素

    SSCAN key cursor [MATCH pattern] [COUNT count]
    ```
    redis 127.0.0.1:6379> SADD myset1 "hello"
    (integer) 1
    redis 127.0.0.1:6379> SADD myset1 "hi"
    (integer) 1
    redis 127.0.0.1:6379> SADD myset1 "bar"
    (integer) 1
    redis 127.0.0.1:6379> sscan myset1 0 match h*
    1) "0"
    2) 1) "hello"
       2) "h1"
    ```


### Redis 有序集合(sorted set)

Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。
不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。
有序集合的成员是唯一的,但分数(score)却可以重复。

例子

```
redis 127.0.0.1:6379> zadd city 1 foshan
(integer) 1
redis 127.0.0.1:6379> zadd city 2 guangzhou
(integer) 1
redis 127.0.0.1:6379> zadd city 3 zhaoqing
(integer) 1
redis 127.0.0.1:6379> zadd city 3 zhaoqing
(integer) 0

127.0.0.1:6379> zrange city 0 10 withscores
1) "foshan"
2) "1"
3) "guangzhou"
4) "2"
5) "zhaoqing"
6) "3"

```


* **zadd** 向有序集合添加一个或多个成员，或者更新已存在成员的分数

   	ZADD key score1 member1 [score2 member2]
    ```
    zadd city 3 foshan
    ```

* **zcard** 获取有序集合的成员数

    ZCARD key
    ```
    zcard city
    ```
* **zcount** 计算在有序集合中指定区间分数的成员数

    ZCOUNT key min max
    ```
    zcount city 1 20
    ```
* **zincrby** 有序集合中对指定成员的分数加上增量 increment

    ZINCRBY key increment member
    ```
    zincrby city 3 "foshan"
    ```
* **zinterstore** 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中

    ZINTERSTORE destination numkeys key [key ...]
    ```
    zadd city2 20 foshan
    zadd city2 30 beijing
    zadd city2 40 shanghai
    zinterstore destination 3 city city2
    ```
* **zlexcount** 在有序集合中计算指定字典区间内成员数量

    ZLEXCOUNT key min max
    ```
    ZLEXCOUNT city - +
    ZLEXCOUNT city [f [s
    ```
* **zrange** 通过索引区间返回有序集合成指定区间内的成员

   ZRANGE key start stop [WITHSCORES]
    ```
    zrange city 0 10 withscores
    ```
* **zrangebylex** 通过索引区间返回有序集合成指定区间内的成员

    ZRANGEBYLEX key min max [LIMIT offset count]
    ```
    zrangebylex city [f [s
    ```




## laravel use redis

### 安装
```
composer require predis/predis
```

### 使用

```
<?php namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\User as User;
use Illuminate\Support\Facades\Redis as Redis;

class UserController extends Controller {

    // use User;

    private $model;
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->model = new User();
    }

    /**
     * Show
     *
     * @return Response
     */
    public function showUser($id)
    {
        $redis = Redis::connection('default');
        $cacheUsers = $redis->get('userList');

        if( $cacheUsers ){
            $users = $cacheUsers;
            print_r($users);
            Log::info('获取用户列表，通过redis');
        }else{
            $users = $this->model->fetchAll();
            $redis->set('userList', $users);
            print_r($users);
            Log::info('获取用户列表，通过msyql');
        }
    }
}
```
